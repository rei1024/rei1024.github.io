# From https://conwaylife.com/forums/viewtopic.php?p=199807#p199807
## Code templates for using binary numbers

# Unless otherwise stated, B registers start and finish each operation with the head at zero,
# with a corresponding U register (with the same identifier) storing the position of the most significant 1-bit

#######################################

# Bxx = 0
# Replacements : { xx = _; label = _; next_state = _ }

#----------------------------

# Bxx = Byy
# Replacements : { xx = _; yy = _; zero = Y/N; label = _; next_state = _ }
# Bxx must be zero at start
# zero defaults to N. If Y is used, Byy is reset to zero

#----------------------------

# Bxx += 1
# Replacements : { xx = _; label = _; next_state = _ }
# Bxx may be increased (and Uxx decreased) before starting, to add a power of 2

#----------------------------

# Bxx += Byy
# Replacements : { xx = _; yy = _; zero = Y/N; label = _; next_state = _ }
# Bxx may be increased (and Uxx decreased) before starting, to add a power-of-2 multiple of Byy
# zero defaults to N. If Y is used, Byy is reset to zero

#----------------------------

# Bxx = Byy + Bzz
# Replacements : { xx = _; yy = _; zz = _; label = _; next_state = _ }
# Bxx must be zero at start

#----------------------------

# Bxx -= Byy
# Replacements : { xx = _; yy = _; zero = Y/N; label = _; next_state = _ }
# Requires Bxx >= Byy
# zero defaults to N. If Y is used, Byy is reset to zero

#----------------------------

# Bxx = Byy - Bxx
# Replacements : { xx = _; yy = _; zero = Y/N; label = _; next_state = _ }
# Requires Byy >= Bxx
# zero defaults to N. If Y is used, Byy is reset to zero

#----------------------------

# Bxx = Byy - Bzz
# Replacements : { xx = _; yy = _; zz = _; label = _; next_state = _ }
# Requires Byy >= Bzz
# Bxx must be zero at start

#----------------------------

# Bxx *= 10
# Replacements : { xx = _; label = _; next_state = _ }

#----------------------------

# Bxx *= Byy
# Replacements : { xx = _; yy = _; temp = _; label = _; next_state = _ }
# Btemp must be zero at start, and will be zero at end.
# Btemp does not use a corresponding Utemp register

#----------------------------

# Bxx = Byy * Bzz
# Replacements : { xx = _; yy = _; zz = _; label = _; next_state = _ }
# Bxx must be zero at start

#----------------------------

# Bxx = Byy // Bzz; Byy %= Bzz
# Replacements : { xx = _; yy = _; zz = _; label = _; next_state = _ }
# Bxx must be zero at start

#----------------------------

# Output Bxx
# Replacements : { xx = _; label = _; next_state = _ }
# Assumes Bxx < 10
# Bxx is reset to zero

#######################################

#DEFINE Bxx = 0

label0; *; label1; TDEC Uxx
label1; Z; label2; READ Bxx
label1; NZ; label1; INC Bxx, TDEC Uxx
label2; *; label3; TDEC Bxx
label3; Z; next_state; NOP
label3; NZ; label2; READ Bxx

#ENDDEF

#------------------------------------------------
#DEFINE Bxx = Byy { zero = N }

label0; *; label1zero; READ Byy
label1N; Z; label2; TDEC Uyy
label1N; NZ; label2; SET Bxx, SET Byy, TDEC Uyy
label1Y; Z; label2; TDEC Uyy
label1Y; NZ; label2; SET Bxx, TDEC Uyy
label2; Z; label3; TDEC Bxx
label2; NZ; label0; INC Byy, INC Bxx, NOP
label3; Z; label4zero; TDEC Byy
label3; NZ; label3; INC Uxx, TDEC Bxx
label4N; Z; next_state; NOP
label4N; NZ; label4N; INC Uyy, TDEC Byy
label4Y; Z; next_state; NOP
label4Y; NZ; label4Y; TDEC Byy
#ENDDEF

#------------------------------------------------

#DEFINE Bxx += 1

label0; *; label1; READ Bxx
label1; Z; label2; SET Bxx, NOP
label1; NZ; label0; INC Bxx, TDEC Uxx
label2; ZZ; label3; TDEC Bxx

# Reset Bxx head

label3; Z; next_state; NOP
label3; NZ; label3; INC Uxx, TDEC Bxx
#ENDDEF

#------------------------------------------------

#DEFINE Bxx += Byy { zero = N }

# Add Byy to Bxx

label0; *; label1zero; READ Byy
label1N; Z; label2; READ Bxx
label1N; NZ; label2; SET Byy, ADD A1, READ Bxx
label1Y; Z; label2; READ Bxx
label1Y; NZ; label2; ADD A1, READ Bxx
label2; Z; label3; ADD B0
label2; NZ; label3; ADD B1
label3; Z; label4; TDEC Uyy
label3; NZ; label4; SET Bxx, TDEC Uyy
label4; Z; label5; ADD B0
label4; NZ; label0; INC Byy, INC Bxx, TDEC Uxx

# Add final carry

label5; Z; label9; TDEC Bxx
label5; NZ; label6; INC Bxx, TDEC Uxx
label6; *; label7; READ Bxx
label7; Z; label8; SET Bxx, NOP
label7; NZ; label6; INC Bxx, TDEC Uxx
label8; ZZ; label9; TDEC Bxx

# Reset Bxx and Byy heads

label9; Z; label10zero; TDEC Byy
label9; NZ; label9; INC Uxx, TDEC Bxx
label10N; Z; next_state; NOP
label10N; NZ; label10N; INC Uyy, TDEC Byy
label10Y; Z; next_state; NOP
label10Y; NZ; label10Y; TDEC Byy
#ENDDEF

#------------------------------------------------

#DEFINE Bxx = Byy + Bzz

# Add Byy to Bzz, writing result to Bxx

label0; *; label1; READ Byy
label1; Z; label2; READ Bzz
label1; NZ; label2; SET Byy, ADD A1, READ Bzz
label2; Z; label3; ADD B0
label2; NZ; label3; SET Bzz, ADD B1
label3; Z; label4; TDEC Uyy
label3; NZ; label4; SET Bxx, TDEC Uyy
label4; Z; label6; TDEC Uzz
label4; NZ; label5; TDEC Uzz
label5; Z; label10; NOP
label5; NZ; label0; INC Bxx, INC Byy, INC Bzz, NOP

# No more Byy digits, add Bzz only

label6; Z; label15; ADD B0
label6; NZ; label7; INC Bxx, INC Bzz, NOP
label7; *; label8; READ Bzz
label8; Z; label9; ADD B0
label8; NZ; label9; SET Bzz, ADD B1
label9; Z; label6; TDEC Uzz
label9; NZ; label6; SET Bxx, TDEC Uzz

# No more Bzz digits, add Byy only

label10; *; label11; INC Bxx, INC Byy, NOP
label11; *; label12; READ Byy
label12; Z; label13; ADD B0
label12; NZ; label13; SET Byy, ADD B1
label13; Z; label14; TDEC Uyy
label13; NZ; label14; SET Bxx, TDEC Uyy
label14; Z; label15; ADD B0
label14; NZ; label10; NOP

# Add final carry

label15; Z; label17; TDEC Bzz
label15; NZ; label16; INC Bxx, NOP
label16; *; label17; SET Bxx, TDEC Bzz

# Reset all heads

label17; Z; label18; TDEC Byy
label17; NZ; label17; INC Uzz, TDEC Bzz
label18; Z; label19; TDEC Bxx
label18; NZ; label18; INC Uyy, TDEC Byy
label19; Z; next_state; NOP
label19; NZ; label19; INC Uxx, TDEC Bxx
#ENDDEF

#------------------------------------------------

#DEFINE Bxx -= Byy { zero = N }

# Subtract Byy from Bxx

label0; *; label1; READ Bxx
label1; Z; label2zero; READ Byy
label1; NZ; label2zero; SUB A1, READ Byy
label2N; Z; label3; SUB B0
label2N; NZ; label3; SET Byy, SUB B1
label2Y; Z; label3; SUB B0
label2Y; NZ; label3; SUB B1
label3; Z; label4; TDEC Uyy
label3; NZ; label4; SET Bxx, TDEC Uyy
label4; Z; label6; SUB A1, NOP
label4; NZ; label5; INC Bxx, INC Byy, TDEC Uxx
label5; *; label1; READ Bxx

# Subtract final borrow

label6; ZZ; label7; SUB B0
label7; Z; label8; INC Bxx, TDEC Uxx
label7; NZ; label10; TDEC Uxx
label8; *; label9; READ Bxx
label9; Z; label7; SET Bxx, NOP
label9; NZ; label10; TDEC Uxx

# Clear leading zeros and reset Bxx and Byy heads

label10; Z; label11; READ Bxx
label10; NZ; label14; INC Uxx, TDEC Bxx
label11; Z; label12; TDEC Bxx
label11; NZ; label13; SET Bxx, NOP
label12; Z; label15zero; TDEC Byy
label12; NZ; label11; READ Bxx
label13; ZZ; label14; TDEC Bxx
label14; Z; label15zero; TDEC Byy
label14; NZ; label14; INC Uxx, TDEC Bxx
label15N; Z; next_state; NOP
label15N; NZ; label15N; INC Uyy, TDEC Byy
label15Y; Z; next_state; NOP
label15Y; NZ; label15Y; TDEC Byy
#ENDDEF

#------------------------------------------------

#DEFINE Bxx = Byy - Bxx { zero = N }

# Subtract Bxx from Byy, writing result to Bxx

label0; *; label1zero; READ Byy
label1N; Z; label2; READ Bxx
label1N; NZ; label2; SET Byy, SUB A1, READ Bxx
label1Y; Z; label2; READ Bxx
label1Y; NZ; label2; SUB A1, READ Bxx
label2; Z; label3; SUB B0
label2; NZ; label3; SUB B1
label3; Z; label4; TDEC Uyy
label3; NZ; label4; SET Bxx, TDEC Uyy
label4; Z; label5; READ Bxx
label4; NZ; label0; INC Bxx, INC Byy, TDEC Uxx

# Assuming Byy >= Bxx there can't be a final borrow
# Clear leading zeros in Bxx and reset Bxx and Byy heads

label5; Z; label6; TDEC Bxx
label5; NZ; label7; SET Bxx, NOP
label6; Z; label9zero; TDEC Byy
label6; NZ; label5; READ Bxx
label7; ZZ; label8; TDEC Bxx
label8; Z; label9zero; TDEC Byy
label8; NZ; label8; INC Uxx, TDEC Bxx
label9N; Z; next_state; NOP
label9N; NZ; label9N; INC Uyy, TDEC Byy
label9Y; Z; next_state; NOP
label9Y; NZ; label9Y; TDEC Byy
#ENDDEF

#------------------------------------------------

#DEFINE Bxx = Byy - Bzz

# Subtract Bzz from Byy, copying result to Bxx

label0; *; label1; READ Byy
label1; Z; label2; READ Bzz
label1; NZ; label2; SET Byy, SUB A1, READ Bzz
label2; Z; label3; SUB B0
label2; NZ; label3; SET Bzz, SUB B1
label3; Z; label4; TDEC Uyy
label3; NZ; label4; SET Bxx, TDEC Uyy
label4; Z; label5; READ Bxx
label4; NZ; label0; INC Bxx, INC Byy, INC Bzz, NOP

# Assuming Byy >= Bzz there can't be a final borrow
# Clear leading zeros in Bxx and reset all heads

label5; Z; label6; TDEC Bxx
label5; NZ; label7; SET Bxx, NOP
label6; Z; label9; TDEC Byy
label6; NZ; label5; READ Bxx
label7; ZZ; label8; TDEC Bxx
label8; Z; label9; TDEC Byy
label8; NZ; label8; INC Uxx, TDEC Bxx
label9; Z; label10; TDEC Bzz
label9; NZ; label9; INC Uyy, TDEC Byy
label10; Z; next_state; NOP
label10; NZ; label10; TDEC Bzz
#ENDDEF

#------------------------------------------------

#DEFINE Bxx *= 10

# Increase length of Bxx

label0; *; label1; INC Uxx, NOP
label1; ZZ; label2; INC Uxx, NOP
label2; ZZ; label3; INC Uxx, NOP
label3; ZZ; label4; INC Uxx, NOP

# Multiply Bxx by 10

label4; ZZ; label5; READ Bxx
label5; Z; label6; MUL 0
label5; NZ; label6; MUL 1
label6; Z; label7; TDEC Uxx
label6; NZ; label7; SET Bxx, TDEC Uxx
label7; Z; label8; READ Bxx
label7; NZ; label4; INC Bxx, NOP

# Clear leading zeros and reset Bxx head

label8; Z; label9; TDEC Bxx
label8; NZ; label10; SET Bxx, NOP
label9; Z; next_state; NOP
label9; NZ; label8; READ Bxx
label10; ZZ; label11; TDEC Bxx
label11; Z; next_state; NOP
label11; NZ; label11; INC Uxx, TDEC Bxx
#ENDDEF

#------------------------------------------------

#DEFINE Bxx *= Byy

# Increase length of Bxx to allow for carries

label0; *; label1; INC Uxx, READ Byy

# If current Byy bit == 0 skip addition

label1; Z; label7; TDEC Uyy
label1; NZ; label2; SET Byy, NOP

# Add Bxx to current Btemp position

label2; ZZ; label3; READ Bxx
label3; Z; label4; READ Btemp
label3; NZ; label4; SET Bxx, ADD A1, READ Btemp
label4; Z; label5; ADD B0
label4; NZ; label5; ADD B1
label5; Z; label6; TDEC Uxx
label5; NZ; label6; SET Btemp, TDEC Uxx
label6; Z; label7; TDEC Uyy
label6; NZ; label2; INC Bxx, INC Btemp, NOP

# Check for another Byy digit

label7; Z; label10; TDEC Uxx
label7; NZ; label9; INC Byy, INC Btemp, TDEC Bxx

# Reset Bxx and Btemp heads, then do next Byy digit

label8; *; label9; TDEC Bxx
label9; Z; label1; READ Byy
label9; NZ; label8; INC Uxx, TDEC Btemp

# No more Byy digits
# If Byy = 0, NZ branch is entered with all heads at zero
# otherwise Z branch, with all heads at maximum

label10; Z; label14; TDEC Byy
label10; NZ; label11; TDEC Uxx

# Reset Bxx to 0

label11; Z; label12; READ Bxx
label11; NZ; label11; INC Bxx, TDEC Uxx
label12; *; label13; TDEC Bxx
label13; Z; next_state; NOP
label13; NZ; label12; READ Bxx

# Reset Byy head and adjust Bxx head

label14; Z; label16; READ Btemp
label14; NZ; label14; INC Uyy, INC Bxx, TDEC Byy

# Copy Btemp to Bxx, clearing leading zeros

label15; *; label16; READ Btemp
label16; Z; label17; TDEC Btemp
label16; NZ; label19; SET Bxx, TDEC Btemp
label17; Z; next_state; NOP
label17; NZ; label18; TDEC Bxx
label18; *; label15; READ Bxx
label19; Z; next_state; NOP
label19; NZ; label20; INC Uxx, TDEC Bxx
label20; *; label21; READ Bxx
label21; *; label22; READ Btemp
label22; Z; label19; TDEC Btemp
label22; NZ; label19; SET Bxx, TDEC Btemp
#ENDDEF

#------------------------------------------------

#DEFINE Bxx = Byy * Bzz

# Increase length of Byy to allow for carries

label0; *; label1; INC Uyy, READ Bzz

# If current T4 bit == 0 skip addition

label1; Z; label8; TDEC Uzz
label1; NZ; label2; SET Bzz, NOP

# Add Byy to current Bxx position

label2; *; label3; READ Byy
label3; Z; label4; READ Bxx
label3; NZ; label4; SET Byy, ADD A1, READ Bxx
label4; Z; label5; ADD B0
label4; NZ; label5; ADD B1
label5; Z; label6; TDEC Uyy
label5; NZ; label6; SET Bxx, TDEC Uyy
label6; Z; label8; TDEC Uzz
label6; NZ; label2; INC Bxx, INC Byy, NOP

# Check for another Bzz digit

label8; Z; label12; TDEC Uyy
label8; NZ; label11; INC Bxx, INC Bzz, TDEC Byy

# Reset Bxx and Byy heads, then do next Bzz digit

label10; *; label11; TDEC Byy
label11; Z; label1; READ Bzz
label11; NZ; label10; INC Uyy, TDEC Bxx

# No more Bzz digits
# If Bzz = 0, NZ branch is entered with all heads at zero
# otherwise Z branch, with all heads at maximum

label12; Z; label13; READ Bxx
label12; NZ; next_state; NOP

# Clear leading zeros in Bxx and reset all heads

label13; Z; label14; TDEC Bxx
label13; NZ; label15; SET Bxx, TDEC Byy
label14; Z; label15; TDEC Byy
label14; NZ; label13; READ Bxx
label15; *; label16; TDEC Byy
label16; Z; label17; TDEC Bzz
label16; NZ; label16; INC Uyy, TDEC Byy
label17; Z; label18; TDEC Bxx
label17; NZ; label17; INC Uzz, TDEC Bzz
label18; Z; next_state; NOP
label18; NZ; label18; INC Uxx, TDEC Bxx
#ENDDEF

#------------------------------------------------

#DEFINE Bxx = Byy // Bzz; Byy %= Bzz

# Initialise

# Set Byy and Bzz heads to maximum, comparing lengths

label0; *; label1; TDEC Uzz
label1; Z; label3; TDEC Uyy
label1; NZ; label2; INC Bzz, TDEC Uyy
label2; Z; label4; TDEC Byy
label2; NZ; label1; INC Byy, TDEC Uzz

# len(Byy) >= len(Bzz) : set Bxx head to len(Byy) - len(Bzz) and go to Compare digits

label3; Z; labelC0; READ Byy
label3; NZ; label3; INC Bxx, INC Byy, TDEC Uyy

# len(Bzz) > len(Byy) : reset Byy and Bzz heads and go to next_state

label4; Z; label5; TDEC Bzz
label4; NZ; label4; INC Uyy, TDEC Byy
label5; Z; next_state; NOP
label5; NZ; label5; INC Uzz, TDEC Bzz

# Compare digits

labelC0; Z; labelC1; READ Bzz
labelC0; NZ; labelC2; SET Byy, READ Bzz
labelC1; Z; labelC4; TDEC Bzz  # 0,0
labelC1; NZ; labelC6; SET Bzz, TDEC Uzz  # 0,1
labelC2; Z; labelS0; TDEC Bzz  # 1,0 : go to Subtract
labelC2; NZ; labelC3; SET Bzz, NOP   # 1,1
labelC3; ZZ; labelC4; TDEC Bzz

# 0,0 or 1,1 : check next digit or subtract if no more digits

labelC4; Z; labelS0; TDEC Bzz
labelC4; NZ; labelC5; INC Uzz, TDEC Byy
labelC5; *; labelC0; READ Byy

# 0,1 : can't subtract : set Byy and Bzz heads to maximum and go to Next digit

labelC6; Z; labelC7; TDEC Uxx
labelC6; NZ; labelC6; INC Bzz, INC Byy, TDEC Uzz
labelC7; Z; labelN0; TDEC Bxx
labelC7; NZ; labelC8; INC Uxx, NOP
labelC8; ZZ; labelN0; INC Uxx, TDEC Bxx

# Subtract

# Set Byy and Bzz heads to subtraction position

labelS0; Z; labelS2; READ Byy
labelS0; NZ; labelS1; INC Uzz, TDEC Byy
labelS1; *; labelS0; TDEC Bzz

# Subtract Bzz from current Byy position

labelS2; Z; labelS3; READ Bzz
labelS2; NZ; labelS3; SUB A1, READ Bzz
labelS3; Z; labelS4; SUB B0
labelS3; NZ; labelS4; SET Bzz, SUB B1
labelS4; Z; labelS5; TDEC Uzz
labelS4; NZ; labelS5; SET Byy, TDEC Uzz
labelS5; Z; labelS7; SUB A1, NOP
labelS5; NZ; labelS6; INC Bzz, INC Byy, NOP
labelS6; *; labelS2; READ Byy

# Clear final borrow and set quotient digit

labelS7; ZZ; labelS8; SET Bxx, SUB B0
labelS8; *; labelN0; INC Uxx, TDEC Bxx

# Next digit : Check for next quotient digit

labelN0; Z; labelN4; READ Byy
labelN0; NZ; labelN1; READ Byy

# Another quotient digit
# If Byy bit was set, decrement Byy head, and go to Subtract
# else decrement Byy head and go to Compare digits

labelN1; Z; labelN2; TDEC Byy
labelN1; NZ; labelN3; TDEC Byy
labelN2; *; labelC0; READ Byy
labelN3; *; labelS0; TDEC Bzz

# No more quotient digits
# Clear leading zeros in Byy

labelN4; Z; labelN5; TDEC Byy
labelN4; NZ; labelN6; SET Byy, NOP
labelN5; Z; labelN8; TDEC Bzz
labelN5; NZ; labelN4; READ Byy

# Reset Byy and Bzz heads and go to next_state

labelN6; ZZ; labelN7; TDEC Byy
labelN7; Z; labelN8; TDEC Bzz
labelN7; NZ; labelN7; INC Uyy, TDEC Byy
labelN8; Z; labelN9; TDEC Uxx
labelN8; NZ; labelN8; INC Uzz, TDEC Bzz
labelN9; *; next_state; NOP
#ENDDEF

#------------------------------------------------

#DEFINE Output Bxx

label0; *; label1; READ Bxx
label1; Z; label2; INC Bxx, NOP
label1; NZ; label4; INC Bxx, NOP
label2; ZZ; label3; READ Bxx
label3; Z; label6; INC Bxx, NOP
label3; NZ; label10; INC Bxx, NOP
label4; ZZ; label5; READ Bxx
label5; Z; label8; INC Bxx, NOP
label5; NZ; label12; INC Bxx, NOP
label6; ZZ; label7; READ Bxx
label7; Z; label14; INC Bxx, NOP
label7; NZ; label18; OUTPUT 4, TDEC Bxx
label8; ZZ; label9; READ Bxx
label9; Z; label16; INC Bxx, NOP
label9; NZ; label18; OUTPUT 5, TDEC Bxx
label10; ZZ; label11; READ Bxx
label11; Z; label18; OUTPUT 2, TDEC Bxx
label11; NZ; label18; OUTPUT 6, TDEC Bxx
label12; ZZ; label13; READ Bxx
label13; Z; label18; OUTPUT 3, TDEC Bxx
label13; NZ; label18; OUTPUT 7, TDEC Bxx
label14; ZZ; label15; READ Bxx
label15; Z; label18; OUTPUT 0, TDEC Bxx
label15; NZ; label18; OUTPUT 8, TDEC Bxx
label16; ZZ; label17; READ Bxx
label17; Z; label18; OUTPUT 1, TDEC Bxx
label17; NZ; label18; OUTPUT 9, TDEC Bxx
label18; Z; label19; TDEC Uxx
label18; NZ; label18; TDEC Bxx
label19; Z; next_state; NOP
label19; NZ; label19; TDEC Uxx
#ENDDEF
