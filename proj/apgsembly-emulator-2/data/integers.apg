# Integers
# Transpiled from https://www.conwaylife.com/forums/viewtopic.php?f=2&t=4196&start=25#p92224

# U0: the number that is being counted and will be printed
# U1: number of digits in U0
# U2: 10^(U1-1)
# U3: current digit of U0 to print
# U4, U5, U6: temporary copies of U0, U1, U2
# U7, U8, U9: temporary helper registers
# U10: flag that says whether or not to print current U0
# State    Input    Next state    Actions
# ---------------------------------------
INITIAL; ZZ; CPYDIG1; NOP, INC U0, INC U1, INC U2

# Copy U0 to U4 with the help of U7
CPYDIG1; ZZ; CPYDIG2; TDEC U0
CPYDIG2; Z; CPYDIG3; TDEC U7
CPYDIG2; NZ; CPYDIG2; INC U7, TDEC U0
CPYDIG3; Z; CPYDIG4; NOP
CPYDIG3; NZ; CPYDIG3; INC U0, INC U4, TDEC U7

# Copy U1 to U5 with the help of U7
CPYDIG4; ZZ; CPYDIG5; TDEC U1
CPYDIG5; Z; CPYDIG6; TDEC U7
CPYDIG5; NZ; CPYDIG5; INC U7, TDEC U1
CPYDIG6; Z; CPYDIG7; NOP
CPYDIG6; NZ; CPYDIG6; INC U1, INC U5, TDEC U7

# Copy U2 to U8 with the help of U7
CPYDIG7; ZZ; CPYDIG8; TDEC U2
CPYDIG8; Z; CPYDIG9; TDEC U7
CPYDIG8; NZ; CPYDIG8; INC U7, TDEC U2
CPYDIG9; Z; CPYDIG10; NOP
CPYDIG9; NZ; CPYDIG9; INC U2, INC U8, TDEC U7

# Copy U8 to U6 with the help of U7
CPYDIG10; ZZ; CPYDIG11; TDEC U8
CPYDIG11; Z; CPYDIG12; TDEC U7
CPYDIG11; NZ; CPYDIG11; INC U7, TDEC U8
CPYDIG12; Z; SUB1; NOP
CPYDIG12; NZ; CPYDIG12; INC U8, INC U6, TDEC U7

# Check whether U6 <= U4, and subtract if it is
# If U6 <= U4 then this sets U4 = U4 - U6, U6 = 0 and increases U3 by 1
# If U4 < U6 then this sets U6 = U6 - U4, U4 = 0 and moves on to digit printing
# Set U3 = number of times we subtracted
SUB1; ZZ; SUB2; TDEC U6
SUB2; Z; CPYDIG10; NOP, INC U3
SUB2; NZ; SUB3; TDEC U4
SUB3; Z; CHKPRINT; NOP, INC U6
SUB3; NZ; SUB2; TDEC U6

### Put any custom sequence code here (i.e., if you want to only print integers
### with a certain property, test for that property between CHKPRINT and PRINTRES).
### If you want to print the integer, give a Z input to PRINTRES, otherwise give
### it an NZ input.
### You can use U7 and U9 as temporary helper registers, if needed, but reset them
### to 0 when done with them.
CHKPRINT; ZZ; PRINTRES; NOP

PRINTRES; Z; PRINTDIG; NOP
### End custom checking code

# Not printing U3? Have to zero out some registers. Also set a flag (U10) so we
# know to skip printing other digits and the period.
PRINTRES; NZ; NOPRINT1; TDEC U4, INC U10
NOPRINT1; Z; NOPRINT2; TDEC U5
NOPRINT1; NZ; NOPRINT1; TDEC U4
NOPRINT2; Z; NOPRINT3; TDEC U6
NOPRINT2; NZ; NOPRINT2; TDEC U5
NOPRINT3; Z; NOPRINT4; TDEC U8
NOPRINT3; NZ; NOPRINT3; TDEC U6
NOPRINT4; Z; NOPRINT5; NOP
NOPRINT4; NZ; NOPRINT4; TDEC U8
# If U3 >= 10 then update U1 and U2. Otherwise just loop back.
NOPRINT5; ZZ; NOPRINT6; TDEC U3
NOPRINT6; *; NOPRINT7; TDEC U3
NOPRINT7; *; NOPRINT8; TDEC U3
NOPRINT8; *; NOPRINT9; TDEC U3
NOPRINT9; *; NOPRINT10; TDEC U3
NOPRINT10; *; NOPRINT11; TDEC U3
NOPRINT11; *; NOPRINT12; TDEC U3
NOPRINT12; *; NOPRINT13; TDEC U3
NOPRINT13; *; NOPRINT14; TDEC U3
NOPRINT14; *; NOPRINT15; TDEC U3
NOPRINT15; Z; CPYDIG1; NOP, INC U0
NOPRINT15; NZ; EXP1; NOP

# Print the digit currently stored in U3
PRINTDIG; ZZ; OUT0; TDEC U3
OUT0; Z; OUTD; NOP, OUTPUT 0
OUT0; NZ; OUT1; TDEC U3
OUT1; Z; OUTD; NOP, OUTPUT 1
OUT1; NZ; OUT2; TDEC U3
OUT2; Z; OUTD; NOP, OUTPUT 2
OUT2; NZ; OUT3; TDEC U3
OUT3; Z; OUTD; NOP, OUTPUT 3
OUT3; NZ; OUT4; TDEC U3
OUT4; Z; OUTD; NOP, OUTPUT 4
OUT4; NZ; OUT5; TDEC U3
OUT5; Z; OUTD; NOP, OUTPUT 5
OUT5; NZ; OUT6; TDEC U3
OUT6; Z; OUTD; NOP, OUTPUT 6
OUT6; NZ; OUT7; TDEC U3
OUT7; Z; OUTD; NOP, OUTPUT 7
OUT7; NZ; OUT8; TDEC U3
OUT8; Z; OUTD; NOP, OUTPUT 8
OUT8; NZ; OUT9; TDEC U3
OUT9; Z; OUTD; NOP, OUTPUT 9
OUT9; NZ; OUT10; NOP, OUTPUT 1
OUT10; ZZ; EXP1; NOP, OUTPUT 0
OUTD; ZZ; DECD1; NOP

# Set U1 = U1 + 1 and U2 = U2 * 10 if U0 just got a new decimal digit
# Copy U2 to U9 with the help of U7
EXP1; ZZ; EXP2; INC U1, TDEC U2
EXP2; Z; EXP3; TDEC U7
EXP2; NZ; EXP2; INC U7, TDEC U2
EXP3; Z; EXP4; NOP
EXP3; NZ; EXP3; INC U2, INC U9, TDEC U7
# Set U2 = 10 * U9, U9 = 0
EXP4; ZZ; EXP5A; TDEC U9
EXP5A; Z; CHKFLAG1; NOP
EXP5A; NZ; EXP5B; NOP, INC U2
EXP5B; ZZ; EXP5C; NOP, INC U2
EXP5C; ZZ; EXP5D; NOP, INC U2
EXP5D; ZZ; EXP5E; NOP, INC U2
EXP5E; ZZ; EXP5F; NOP, INC U2
EXP5F; ZZ; EXP5G; NOP, INC U2
EXP5G; ZZ; EXP5H; NOP, INC U2
EXP5H; ZZ; EXP5I; NOP, INC U2
EXP5I; ZZ; EXP5A; TDEC U9, INC U2

# If U10 = 1 then jump to next U0
CHKFLAG1; ZZ; CHKFLAG2; TDEC U10
CHKFLAG2; Z; DECD1; NOP
CHKFLAG2; NZ; CPYDIG1; NOP, INC U0

# Copy U8 to U4 with the help of U7
DECD1; ZZ; DECD2; TDEC U8
DECD2; Z; DECD3; TDEC U7
DECD2; NZ; DECD2; INC U7, TDEC U8
DECD3; Z; DECD4; NOP
DECD3; NZ; DECD3; INC U8, INC U4, TDEC U7

# Set U4 = U4 - U6, U6 = 0, U5 = U5 - 1
DECD4; ZZ; DECD5; TDEC U6
DECD5; Z; DECDT; TDEC U5
DECD5; NZ; DECD6; TDEC U4
DECD6; *; DECD5; TDEC U6

# Set U6 = U8/10, U8 = 0, or quit if we've printed all digits
DECDT; *; DECD7; TDEC U5
DECD7; Z; DECD18; TDEC U8
DECD7; NZ; DECD8; INC U5, TDEC U8
DECD8; *; DECD9; TDEC U8
DECD9; *; DECD10; TDEC U8
DECD10; *; DECD11; TDEC U8
DECD11; *; DECD12; TDEC U8
DECD12; *; DECD13; TDEC U8
DECD13; *; DECD14; TDEC U8
DECD14; *; DECD15; TDEC U8
DECD15; *; DECD16; TDEC U8
DECD16; *; DECD17; TDEC U8
DECD17; Z; CPYDIG13; NOP
DECD17; NZ; DECD8; TDEC U8, INC U6
DECD18; Z; CPYDIG1; NOP, INC U0, OUTPUT .
DECD18; NZ; DECD18; TDEC U8

# Copy U6 to U8 with the help of U7
CPYDIG13; ZZ; CPYDIG14; TDEC U6
CPYDIG14; Z; CPYDIG15; TDEC U7
CPYDIG14; NZ; CPYDIG14; INC U7, TDEC U6
CPYDIG15; Z; SUB1; NOP
CPYDIG15; NZ; CPYDIG15; INC U6, INC U8, TDEC U7
