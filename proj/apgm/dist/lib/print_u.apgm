/*
function print(n) {
    let [digit, step] = largestUnit(n);
    while (true) {
        let x = 0;
        while (true) {
            if (n >= step) {
                n -= step;
                x++;
            } else {
                console.log(x);
                if (step === 1) {
                    return;
                }
                step = Math.floor(step / 10);
                break;
            }
        }
    }
}

function largestUnit(n) {
    let step = 1;
    let digit = 1;
    while (true) {
        for (let i = 0; i < 9; i++) {
            n -= step;
            if (n <= 0) {
                return [digit, step];
            }
        }
        digit++;
        step *= 10;
    }
}

*/

/**
 * after: x = 0
 */
macro zero_u!(x) {
    while_nz(tdec_u(x)) {}
}

/**
 * before: y = 0
 * after: x = 0, y = x;
 */
macro move_u!(x, y) {
    while_nz(tdec_u(x)) {
        inc_u(y);
    }
}

/**
 * before: temp = 0
 * after: y = x, temp = 0
 */
macro copy_u!(x, y, temp) {
    move_u!(x, temp);
    while_nz(tdec_u(temp)) {
        inc_u(x);
        inc_u(y);
    }
}

/**
 * after:
 * x = max(0, x - y);
 * y = 0;
 */
macro sub_u!(x, y) {
    while_nz(tdec_u(y)) {
        tdec_u(x);
    }
}

/**
 * non-destructive
 * before: temp0 = 0, temp1 = 1
 * after: x = max(0, x - y), temp0 = 0, temp1 = 0
 */
macro sub_nd_u!(x, y, temp0, temp1) {
    copy_u!(y, temp0, temp1);
    sub_u!(x, temp0);
}

/**
 * before: temp = 0
 * after: temp = 0; x = x * constant;
 */
macro mul_by_constant_u!(x, temp, constant) {
    move_u!(x, temp);
    while_nz(tdec_u(temp)) {
        repeat(constant, inc_u(x));
    }
}

/**
 * before: temp = 0
 * after: temp = 0; x = floor(x / constant);
 */
macro div_by_constant_u!(x, temp, constant) {
    move_u!(x, temp);
    while_nz(tdec_u(temp)) {
        inc_u(temp);
        repeat(constant, tdec_u(temp));
        inc_u(x);
    }
}

/**
 * before: temp0 = 0, temp1 = 0, result = 0
 * after: x = 0, result = 10 ^ floor(log10(x))
 */
macro largest_unit!(x, result, temp0, temp1) {
    inc_u(result);
    loop {
        repeat(9, {
            sub_nd_u!(x, result, temp0, temp1);
            if_z(tdec_u(x)) {
                break();
            } else {
                inc_u(x);
            }
        });
        mul_by_constant_u!(result, temp1, 10);
    }
}

/**
 * before: temp0 = 0, temp1 = 0
 */
macro less_than_or_equal!(x, y, temp0, temp1, temp2, x_is_less_than_y_expr, x_is_greater_than_y_expr) {
    copy_u!(x, temp0, temp2);
    copy_u!(y, temp1, temp2);
    sub_u!(temp0, temp1);
    if_z(tdec_u(temp0)) {
        x_is_less_than_y_expr;
    } else {
        zero_u!(temp0);
        x_is_greater_than_y_expr;
    }
}

/**
 * before: x <= 9
 * after: x = 0
 */
macro print_digit_u!(x) {
    if_z(tdec_u(x)) {
        output("0");
    } else if_z(tdec_u(x)) {
        output("1");
    } else if_z(tdec_u(x)) {
        output("2");
    } else if_z(tdec_u(x)) {
        output("3");
    } else if_z(tdec_u(x)) {
        output("4");
    } else if_z(tdec_u(x)) {
        output("5");
    } else if_z(tdec_u(x)) {
        output("6");
    } else if_z(tdec_u(x)) {
        output("7");
    } else if_z(tdec_u(x)) {
        output("8");
    } else {
        output("9");
    }
}

macro equal_to_one_u!(x, x_is_equal_to_one_expr, x_is_not_equal_to_one_expr) {
    if_z (tdec_u(x)) {
        x_is_not_equal_to_one_expr;
    } else if_z (tdec_u(x)) {
        inc_u(x);
        x_is_equal_to_one_expr;
    } else {
        inc_u(x);
        inc_u(x);
        x_is_not_equal_to_one_expr;
    }
}

macro print_u!(reg, step /* temp0 */ , x /* temp1 */ , temp2, temp3, temp4) {
    copy_u!(reg, temp2, temp3);
    largest_unit!(temp2, step, temp3, temp4); /* step = largest_unit(reg); */
    loop {
        zero_u!(x);
        loop {
            less_than_or_equal!(step, reg, temp2, temp3, temp4, {
                /* step <= reg */
                sub_nd_u!(reg, step, temp2, temp3);
                inc_u(x);
            }, {
                /* step > reg */
                print_digit_u!(x);
                equal_to_one_u!(step, {
                    zero_u!(step); /* cleanup */
                    break(2);
                }, {});
                div_by_constant_u!(step, temp2, 10);
                break();
            });
        }
    }
}

#REGISTERS { "U0": 123 }

print_u!(0, 1, 2, 3, 4, 5);
